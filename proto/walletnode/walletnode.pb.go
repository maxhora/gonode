// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: walletnode/walletnode.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterArtworkReply_Error_Status int32

const (
	RegisterArtworkReply_Error_OK  RegisterArtworkReply_Error_Status = 0
	RegisterArtworkReply_Error_ERR RegisterArtworkReply_Error_Status = 1
)

// Enum value maps for RegisterArtworkReply_Error_Status.
var (
	RegisterArtworkReply_Error_Status_name = map[int32]string{
		0: "OK",
		1: "ERR",
	}
	RegisterArtworkReply_Error_Status_value = map[string]int32{
		"OK":  0,
		"ERR": 1,
	}
)

func (x RegisterArtworkReply_Error_Status) Enum() *RegisterArtworkReply_Error_Status {
	p := new(RegisterArtworkReply_Error_Status)
	*p = x
	return p
}

func (x RegisterArtworkReply_Error_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterArtworkReply_Error_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_walletnode_walletnode_proto_enumTypes[0].Descriptor()
}

func (RegisterArtworkReply_Error_Status) Type() protoreflect.EnumType {
	return &file_walletnode_walletnode_proto_enumTypes[0]
}

func (x RegisterArtworkReply_Error_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterArtworkReply_Error_Status.Descriptor instead.
func (RegisterArtworkReply_Error_Status) EnumDescriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 0, 0}
}

type RegisterArtworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Requests:
	//	*RegisterArtworkRequest_Handshake
	//	*RegisterArtworkRequest_AcceptedNodes
	//	*RegisterArtworkRequest_ConnectTo
	//	*RegisterArtworkRequest_UploadImage
	//	*RegisterArtworkRequest_SendTicket
	Requests isRegisterArtworkRequest_Requests `protobuf_oneof:"requests"`
}

func (x *RegisterArtworkRequest) Reset() {
	*x = RegisterArtworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0}
}

func (m *RegisterArtworkRequest) GetRequests() isRegisterArtworkRequest_Requests {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (x *RegisterArtworkRequest) GetHandshake() *RegisterArtworkRequest_HandshakeRequest {
	if x, ok := x.GetRequests().(*RegisterArtworkRequest_Handshake); ok {
		return x.Handshake
	}
	return nil
}

func (x *RegisterArtworkRequest) GetAcceptedNodes() *RegisterArtworkRequest_AcceptedNodesRequest {
	if x, ok := x.GetRequests().(*RegisterArtworkRequest_AcceptedNodes); ok {
		return x.AcceptedNodes
	}
	return nil
}

func (x *RegisterArtworkRequest) GetConnectTo() *RegisterArtworkRequest_ConnectToRequest {
	if x, ok := x.GetRequests().(*RegisterArtworkRequest_ConnectTo); ok {
		return x.ConnectTo
	}
	return nil
}

func (x *RegisterArtworkRequest) GetUploadImage() *RegisterArtworkRequest_UploadImageRequest {
	if x, ok := x.GetRequests().(*RegisterArtworkRequest_UploadImage); ok {
		return x.UploadImage
	}
	return nil
}

func (x *RegisterArtworkRequest) GetSendTicket() *RegisterArtworkRequest_SendTicketRequest {
	if x, ok := x.GetRequests().(*RegisterArtworkRequest_SendTicket); ok {
		return x.SendTicket
	}
	return nil
}

type isRegisterArtworkRequest_Requests interface {
	isRegisterArtworkRequest_Requests()
}

type RegisterArtworkRequest_Handshake struct {
	Handshake *RegisterArtworkRequest_HandshakeRequest `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type RegisterArtworkRequest_AcceptedNodes struct {
	AcceptedNodes *RegisterArtworkRequest_AcceptedNodesRequest `protobuf:"bytes,2,opt,name=accepted_nodes,json=acceptedNodes,proto3,oneof"`
}

type RegisterArtworkRequest_ConnectTo struct {
	ConnectTo *RegisterArtworkRequest_ConnectToRequest `protobuf:"bytes,3,opt,name=connect_to,json=connectTo,proto3,oneof"`
}

type RegisterArtworkRequest_UploadImage struct {
	UploadImage *RegisterArtworkRequest_UploadImageRequest `protobuf:"bytes,4,opt,name=upload_image,json=uploadImage,proto3,oneof"`
}

type RegisterArtworkRequest_SendTicket struct {
	SendTicket *RegisterArtworkRequest_SendTicketRequest `protobuf:"bytes,5,opt,name=send_ticket,json=sendTicket,proto3,oneof"`
}

func (*RegisterArtworkRequest_Handshake) isRegisterArtworkRequest_Requests() {}

func (*RegisterArtworkRequest_AcceptedNodes) isRegisterArtworkRequest_Requests() {}

func (*RegisterArtworkRequest_ConnectTo) isRegisterArtworkRequest_Requests() {}

func (*RegisterArtworkRequest_UploadImage) isRegisterArtworkRequest_Requests() {}

func (*RegisterArtworkRequest_SendTicket) isRegisterArtworkRequest_Requests() {}

type RegisterArtworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Replies:
	//	*RegisterArtworkReply_Handshake
	//	*RegisterArtworkReply_AcceptedNodes
	//	*RegisterArtworkReply_ConnectTo
	//	*RegisterArtworkReply_UploadImage
	//	*RegisterArtworkReply_SendTicket
	Replies isRegisterArtworkReply_Replies `protobuf_oneof:"replies"`
}

func (x *RegisterArtworkReply) Reset() {
	*x = RegisterArtworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply) ProtoMessage() {}

func (x *RegisterArtworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1}
}

func (m *RegisterArtworkReply) GetReplies() isRegisterArtworkReply_Replies {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (x *RegisterArtworkReply) GetHandshake() *RegisterArtworkReply_HandshakeReply {
	if x, ok := x.GetReplies().(*RegisterArtworkReply_Handshake); ok {
		return x.Handshake
	}
	return nil
}

func (x *RegisterArtworkReply) GetAcceptedNodes() *RegisterArtworkReply_AcceptedNodesReply {
	if x, ok := x.GetReplies().(*RegisterArtworkReply_AcceptedNodes); ok {
		return x.AcceptedNodes
	}
	return nil
}

func (x *RegisterArtworkReply) GetConnectTo() *RegisterArtworkReply_ConnectToReply {
	if x, ok := x.GetReplies().(*RegisterArtworkReply_ConnectTo); ok {
		return x.ConnectTo
	}
	return nil
}

func (x *RegisterArtworkReply) GetUploadImage() *RegisterArtworkReply_UploadImageReply {
	if x, ok := x.GetReplies().(*RegisterArtworkReply_UploadImage); ok {
		return x.UploadImage
	}
	return nil
}

func (x *RegisterArtworkReply) GetSendTicket() *RegisterArtworkReply_SendTicketReply {
	if x, ok := x.GetReplies().(*RegisterArtworkReply_SendTicket); ok {
		return x.SendTicket
	}
	return nil
}

type isRegisterArtworkReply_Replies interface {
	isRegisterArtworkReply_Replies()
}

type RegisterArtworkReply_Handshake struct {
	Handshake *RegisterArtworkReply_HandshakeReply `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type RegisterArtworkReply_AcceptedNodes struct {
	AcceptedNodes *RegisterArtworkReply_AcceptedNodesReply `protobuf:"bytes,2,opt,name=accepted_nodes,json=acceptedNodes,proto3,oneof"`
}

type RegisterArtworkReply_ConnectTo struct {
	ConnectTo *RegisterArtworkReply_ConnectToReply `protobuf:"bytes,3,opt,name=connect_to,json=connectTo,proto3,oneof"`
}

type RegisterArtworkReply_UploadImage struct {
	UploadImage *RegisterArtworkReply_UploadImageReply `protobuf:"bytes,4,opt,name=upload_image,json=uploadImage,proto3,oneof"`
}

type RegisterArtworkReply_SendTicket struct {
	SendTicket *RegisterArtworkReply_SendTicketReply `protobuf:"bytes,5,opt,name=send_ticket,json=sendTicket,proto3,oneof"`
}

func (*RegisterArtworkReply_Handshake) isRegisterArtworkReply_Replies() {}

func (*RegisterArtworkReply_AcceptedNodes) isRegisterArtworkReply_Replies() {}

func (*RegisterArtworkReply_ConnectTo) isRegisterArtworkReply_Replies() {}

func (*RegisterArtworkReply_UploadImage) isRegisterArtworkReply_Replies() {}

func (*RegisterArtworkReply_SendTicket) isRegisterArtworkReply_Replies() {}

type RegisterArtworkRequest_HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnID    string `protobuf:"bytes,1,opt,name=connID,proto3" json:"connID,omitempty"`
	IsPrimary bool   `protobuf:"varint,2,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *RegisterArtworkRequest_HandshakeRequest) Reset() {
	*x = RegisterArtworkRequest_HandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest_HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest_HandshakeRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest_HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest_HandshakeRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest_HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RegisterArtworkRequest_HandshakeRequest) GetConnID() string {
	if x != nil {
		return x.ConnID
	}
	return ""
}

func (x *RegisterArtworkRequest_HandshakeRequest) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

type RegisterArtworkRequest_AcceptedNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterArtworkRequest_AcceptedNodesRequest) Reset() {
	*x = RegisterArtworkRequest_AcceptedNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest_AcceptedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest_AcceptedNodesRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest_AcceptedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest_AcceptedNodesRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest_AcceptedNodesRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0, 1}
}

type RegisterArtworkRequest_ConnectToRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeKey string `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
}

func (x *RegisterArtworkRequest_ConnectToRequest) Reset() {
	*x = RegisterArtworkRequest_ConnectToRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest_ConnectToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest_ConnectToRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest_ConnectToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest_ConnectToRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest_ConnectToRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RegisterArtworkRequest_ConnectToRequest) GetNodeKey() string {
	if x != nil {
		return x.NodeKey
	}
	return ""
}

type RegisterArtworkRequest_UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *RegisterArtworkRequest_UploadImageRequest) Reset() {
	*x = RegisterArtworkRequest_UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest_UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest_UploadImageRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest_UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest_UploadImageRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest_UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RegisterArtworkRequest_UploadImageRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type RegisterArtworkRequest_SendTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []byte `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	TicketSignature string `protobuf:"bytes,2,opt,name=ticket_signature,json=ticketSignature,proto3" json:"ticket_signature,omitempty"`
	Fgpt            string `protobuf:"bytes,3,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	FgptSignature   string `protobuf:"bytes,4,opt,name=fgpt_signature,json=fgptSignature,proto3" json:"fgpt_signature,omitempty"`
	FeeTxid         string `protobuf:"bytes,5,opt,name=fee_txid,json=feeTxid,proto3" json:"fee_txid,omitempty"`
	Thumbnail       []byte `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *RegisterArtworkRequest_SendTicketRequest) Reset() {
	*x = RegisterArtworkRequest_SendTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkRequest_SendTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkRequest_SendTicketRequest) ProtoMessage() {}

func (x *RegisterArtworkRequest_SendTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkRequest_SendTicketRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtworkRequest_SendTicketRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetTicketSignature() string {
	if x != nil {
		return x.TicketSignature
	}
	return ""
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetFgptSignature() string {
	if x != nil {
		return x.FgptSignature
	}
	return ""
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetFeeTxid() string {
	if x != nil {
		return x.FeeTxid
	}
	return ""
}

func (x *RegisterArtworkRequest_SendTicketRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type RegisterArtworkReply_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterArtworkReply_Error_Status `protobuf:"varint,1,opt,name=status,proto3,enum=walletnode.RegisterArtworkReply_Error_Status" json:"status,omitempty"`
	ErrMsg string                            `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *RegisterArtworkReply_Error) Reset() {
	*x = RegisterArtworkReply_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_Error) ProtoMessage() {}

func (x *RegisterArtworkReply_Error) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_Error.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_Error) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RegisterArtworkReply_Error) GetStatus() RegisterArtworkReply_Error_Status {
	if x != nil {
		return x.Status
	}
	return RegisterArtworkReply_Error_OK
}

func (x *RegisterArtworkReply_Error) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type RegisterArtworkReply_HandshakeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *RegisterArtworkReply_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterArtworkReply_HandshakeReply) Reset() {
	*x = RegisterArtworkReply_HandshakeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_HandshakeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_HandshakeReply) ProtoMessage() {}

func (x *RegisterArtworkReply_HandshakeReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_HandshakeReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_HandshakeReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RegisterArtworkReply_HandshakeReply) GetError() *RegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterArtworkReply_AcceptedNodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*RegisterArtworkReply_AcceptedNodesReply_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	Error *RegisterArtworkReply_Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterArtworkReply_AcceptedNodesReply) Reset() {
	*x = RegisterArtworkReply_AcceptedNodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_AcceptedNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_AcceptedNodesReply) ProtoMessage() {}

func (x *RegisterArtworkReply_AcceptedNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_AcceptedNodesReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_AcceptedNodesReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 2}
}

func (x *RegisterArtworkReply_AcceptedNodesReply) GetPeers() []*RegisterArtworkReply_AcceptedNodesReply_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *RegisterArtworkReply_AcceptedNodesReply) GetError() *RegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterArtworkReply_ConnectToReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *RegisterArtworkReply_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterArtworkReply_ConnectToReply) Reset() {
	*x = RegisterArtworkReply_ConnectToReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_ConnectToReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_ConnectToReply) ProtoMessage() {}

func (x *RegisterArtworkReply_ConnectToReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_ConnectToReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_ConnectToReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 3}
}

func (x *RegisterArtworkReply_ConnectToReply) GetError() *RegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterArtworkReply_UploadImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fgpt  string                      `protobuf:"bytes,1,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	Error *RegisterArtworkReply_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterArtworkReply_UploadImageReply) Reset() {
	*x = RegisterArtworkReply_UploadImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_UploadImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_UploadImageReply) ProtoMessage() {}

func (x *RegisterArtworkReply_UploadImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_UploadImageReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_UploadImageReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 4}
}

func (x *RegisterArtworkReply_UploadImageReply) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *RegisterArtworkReply_UploadImageReply) GetError() *RegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterArtworkReply_SendTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketTxid string                      `protobuf:"bytes,1,opt,name=ticket_txid,json=ticketTxid,proto3" json:"ticket_txid,omitempty"`
	Error      *RegisterArtworkReply_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterArtworkReply_SendTicketReply) Reset() {
	*x = RegisterArtworkReply_SendTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_SendTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_SendTicketReply) ProtoMessage() {}

func (x *RegisterArtworkReply_SendTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_SendTicketReply.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_SendTicketReply) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 5}
}

func (x *RegisterArtworkReply_SendTicketReply) GetTicketTxid() string {
	if x != nil {
		return x.TicketTxid
	}
	return ""
}

func (x *RegisterArtworkReply_SendTicketReply) GetError() *RegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterArtworkReply_AcceptedNodesReply_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeKey string `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
}

func (x *RegisterArtworkReply_AcceptedNodesReply_Peer) Reset() {
	*x = RegisterArtworkReply_AcceptedNodesReply_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_walletnode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtworkReply_AcceptedNodesReply_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtworkReply_AcceptedNodesReply_Peer) ProtoMessage() {}

func (x *RegisterArtworkReply_AcceptedNodesReply_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_walletnode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtworkReply_AcceptedNodesReply_Peer.ProtoReflect.Descriptor instead.
func (*RegisterArtworkReply_AcceptedNodesReply_Peer) Descriptor() ([]byte, []int) {
	return file_walletnode_walletnode_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *RegisterArtworkReply_AcceptedNodesReply_Peer) GetNodeKey() string {
	if x != nil {
		return x.NodeKey
	}
	return ""
}

var File_walletnode_walletnode_proto protoreflect.FileDescriptor

var file_walletnode_walletnode_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x06, 0x0a, 0x16, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x12, 0x5a, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x49, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x1a, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x2a, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x67, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x67, 0x70,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x67, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x67, 0x70, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54,
	0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x93, 0x09,
	0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x12, 0x56, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x19, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x01, 0x1a, 0x4e, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xc5, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4e, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x21, 0x0a,
	0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x1a, 0x4e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x1a, 0x64, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x67, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x70, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x78, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x32, 0x69, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x6f, 0x77, 0x72, 0x6b, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x27,
	0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_walletnode_walletnode_proto_rawDescOnce sync.Once
	file_walletnode_walletnode_proto_rawDescData = file_walletnode_walletnode_proto_rawDesc
)

func file_walletnode_walletnode_proto_rawDescGZIP() []byte {
	file_walletnode_walletnode_proto_rawDescOnce.Do(func() {
		file_walletnode_walletnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_walletnode_walletnode_proto_rawDescData)
	})
	return file_walletnode_walletnode_proto_rawDescData
}

var file_walletnode_walletnode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_walletnode_walletnode_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_walletnode_walletnode_proto_goTypes = []interface{}{
	(RegisterArtworkReply_Error_Status)(0),               // 0: walletnode.RegisterArtworkReply.Error.Status
	(*RegisterArtworkRequest)(nil),                       // 1: walletnode.RegisterArtworkRequest
	(*RegisterArtworkReply)(nil),                         // 2: walletnode.RegisterArtworkReply
	(*RegisterArtworkRequest_HandshakeRequest)(nil),      // 3: walletnode.RegisterArtworkRequest.HandshakeRequest
	(*RegisterArtworkRequest_AcceptedNodesRequest)(nil),  // 4: walletnode.RegisterArtworkRequest.AcceptedNodesRequest
	(*RegisterArtworkRequest_ConnectToRequest)(nil),      // 5: walletnode.RegisterArtworkRequest.ConnectToRequest
	(*RegisterArtworkRequest_UploadImageRequest)(nil),    // 6: walletnode.RegisterArtworkRequest.UploadImageRequest
	(*RegisterArtworkRequest_SendTicketRequest)(nil),     // 7: walletnode.RegisterArtworkRequest.SendTicketRequest
	(*RegisterArtworkReply_Error)(nil),                   // 8: walletnode.RegisterArtworkReply.Error
	(*RegisterArtworkReply_HandshakeReply)(nil),          // 9: walletnode.RegisterArtworkReply.HandshakeReply
	(*RegisterArtworkReply_AcceptedNodesReply)(nil),      // 10: walletnode.RegisterArtworkReply.AcceptedNodesReply
	(*RegisterArtworkReply_ConnectToReply)(nil),          // 11: walletnode.RegisterArtworkReply.ConnectToReply
	(*RegisterArtworkReply_UploadImageReply)(nil),        // 12: walletnode.RegisterArtworkReply.UploadImageReply
	(*RegisterArtworkReply_SendTicketReply)(nil),         // 13: walletnode.RegisterArtworkReply.SendTicketReply
	(*RegisterArtworkReply_AcceptedNodesReply_Peer)(nil), // 14: walletnode.RegisterArtworkReply.AcceptedNodesReply.Peer
}
var file_walletnode_walletnode_proto_depIdxs = []int32{
	3,  // 0: walletnode.RegisterArtworkRequest.handshake:type_name -> walletnode.RegisterArtworkRequest.HandshakeRequest
	4,  // 1: walletnode.RegisterArtworkRequest.accepted_nodes:type_name -> walletnode.RegisterArtworkRequest.AcceptedNodesRequest
	5,  // 2: walletnode.RegisterArtworkRequest.connect_to:type_name -> walletnode.RegisterArtworkRequest.ConnectToRequest
	6,  // 3: walletnode.RegisterArtworkRequest.upload_image:type_name -> walletnode.RegisterArtworkRequest.UploadImageRequest
	7,  // 4: walletnode.RegisterArtworkRequest.send_ticket:type_name -> walletnode.RegisterArtworkRequest.SendTicketRequest
	9,  // 5: walletnode.RegisterArtworkReply.handshake:type_name -> walletnode.RegisterArtworkReply.HandshakeReply
	10, // 6: walletnode.RegisterArtworkReply.accepted_nodes:type_name -> walletnode.RegisterArtworkReply.AcceptedNodesReply
	11, // 7: walletnode.RegisterArtworkReply.connect_to:type_name -> walletnode.RegisterArtworkReply.ConnectToReply
	12, // 8: walletnode.RegisterArtworkReply.upload_image:type_name -> walletnode.RegisterArtworkReply.UploadImageReply
	13, // 9: walletnode.RegisterArtworkReply.send_ticket:type_name -> walletnode.RegisterArtworkReply.SendTicketReply
	0,  // 10: walletnode.RegisterArtworkReply.Error.status:type_name -> walletnode.RegisterArtworkReply.Error.Status
	8,  // 11: walletnode.RegisterArtworkReply.HandshakeReply.error:type_name -> walletnode.RegisterArtworkReply.Error
	14, // 12: walletnode.RegisterArtworkReply.AcceptedNodesReply.peers:type_name -> walletnode.RegisterArtworkReply.AcceptedNodesReply.Peer
	8,  // 13: walletnode.RegisterArtworkReply.AcceptedNodesReply.error:type_name -> walletnode.RegisterArtworkReply.Error
	8,  // 14: walletnode.RegisterArtworkReply.ConnectToReply.error:type_name -> walletnode.RegisterArtworkReply.Error
	8,  // 15: walletnode.RegisterArtworkReply.UploadImageReply.error:type_name -> walletnode.RegisterArtworkReply.Error
	8,  // 16: walletnode.RegisterArtworkReply.SendTicketReply.error:type_name -> walletnode.RegisterArtworkReply.Error
	1,  // 17: walletnode.WalletNode.RegisterArtowrk:input_type -> walletnode.RegisterArtworkRequest
	2,  // 18: walletnode.WalletNode.RegisterArtowrk:output_type -> walletnode.RegisterArtworkReply
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_walletnode_walletnode_proto_init() }
func file_walletnode_walletnode_proto_init() {
	if File_walletnode_walletnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_walletnode_walletnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest_HandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest_AcceptedNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest_ConnectToRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest_UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkRequest_SendTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_HandshakeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_AcceptedNodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_ConnectToReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_UploadImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_SendTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_walletnode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtworkReply_AcceptedNodesReply_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_walletnode_walletnode_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RegisterArtworkRequest_Handshake)(nil),
		(*RegisterArtworkRequest_AcceptedNodes)(nil),
		(*RegisterArtworkRequest_ConnectTo)(nil),
		(*RegisterArtworkRequest_UploadImage)(nil),
		(*RegisterArtworkRequest_SendTicket)(nil),
	}
	file_walletnode_walletnode_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RegisterArtworkReply_Handshake)(nil),
		(*RegisterArtworkReply_AcceptedNodes)(nil),
		(*RegisterArtworkReply_ConnectTo)(nil),
		(*RegisterArtworkReply_UploadImage)(nil),
		(*RegisterArtworkReply_SendTicket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_walletnode_walletnode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_walletnode_walletnode_proto_goTypes,
		DependencyIndexes: file_walletnode_walletnode_proto_depIdxs,
		EnumInfos:         file_walletnode_walletnode_proto_enumTypes,
		MessageInfos:      file_walletnode_walletnode_proto_msgTypes,
	}.Build()
	File_walletnode_walletnode_proto = out.File
	file_walletnode_walletnode_proto_rawDesc = nil
	file_walletnode_walletnode_proto_goTypes = nil
	file_walletnode_walletnode_proto_depIdxs = nil
}
