// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletNodeClient is the client API for WalletNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletNodeClient interface {
	RegisterArtowrk(ctx context.Context, opts ...grpc.CallOption) (WalletNode_RegisterArtowrkClient, error)
}

type walletNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletNodeClient(cc grpc.ClientConnInterface) WalletNodeClient {
	return &walletNodeClient{cc}
}

func (c *walletNodeClient) RegisterArtowrk(ctx context.Context, opts ...grpc.CallOption) (WalletNode_RegisterArtowrkClient, error) {
	stream, err := c.cc.NewStream(ctx, &WalletNode_ServiceDesc.Streams[0], "/walletnode.WalletNode/RegisterArtowrk", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletNodeRegisterArtowrkClient{stream}
	return x, nil
}

type WalletNode_RegisterArtowrkClient interface {
	Send(*RegisterArtworkRequest) error
	Recv() (*RegisterArtworkReply, error)
	grpc.ClientStream
}

type walletNodeRegisterArtowrkClient struct {
	grpc.ClientStream
}

func (x *walletNodeRegisterArtowrkClient) Send(m *RegisterArtworkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *walletNodeRegisterArtowrkClient) Recv() (*RegisterArtworkReply, error) {
	m := new(RegisterArtworkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalletNodeServer is the server API for WalletNode service.
// All implementations must embed UnimplementedWalletNodeServer
// for forward compatibility
type WalletNodeServer interface {
	RegisterArtowrk(WalletNode_RegisterArtowrkServer) error
	mustEmbedUnimplementedWalletNodeServer()
}

// UnimplementedWalletNodeServer must be embedded to have forward compatible implementations.
type UnimplementedWalletNodeServer struct {
}

func (UnimplementedWalletNodeServer) RegisterArtowrk(WalletNode_RegisterArtowrkServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterArtowrk not implemented")
}
func (UnimplementedWalletNodeServer) mustEmbedUnimplementedWalletNodeServer() {}

// UnsafeWalletNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletNodeServer will
// result in compilation errors.
type UnsafeWalletNodeServer interface {
	mustEmbedUnimplementedWalletNodeServer()
}

func RegisterWalletNodeServer(s grpc.ServiceRegistrar, srv WalletNodeServer) {
	s.RegisterService(&WalletNode_ServiceDesc, srv)
}

func _WalletNode_RegisterArtowrk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WalletNodeServer).RegisterArtowrk(&walletNodeRegisterArtowrkServer{stream})
}

type WalletNode_RegisterArtowrkServer interface {
	Send(*RegisterArtworkReply) error
	Recv() (*RegisterArtworkRequest, error)
	grpc.ServerStream
}

type walletNodeRegisterArtowrkServer struct {
	grpc.ServerStream
}

func (x *walletNodeRegisterArtowrkServer) Send(m *RegisterArtworkReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *walletNodeRegisterArtowrkServer) Recv() (*RegisterArtworkRequest, error) {
	m := new(RegisterArtworkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalletNode_ServiceDesc is the grpc.ServiceDesc for WalletNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "walletnode.WalletNode",
	HandlerType: (*WalletNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterArtowrk",
			Handler:       _WalletNode_RegisterArtowrk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "walletnode/walletnode.proto",
}
