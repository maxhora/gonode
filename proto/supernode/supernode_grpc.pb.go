// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperNodeClient is the client API for SuperNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperNodeClient interface {
	RegisterArtowrk(ctx context.Context, opts ...grpc.CallOption) (SuperNode_RegisterArtowrkClient, error)
}

type superNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperNodeClient(cc grpc.ClientConnInterface) SuperNodeClient {
	return &superNodeClient{cc}
}

func (c *superNodeClient) RegisterArtowrk(ctx context.Context, opts ...grpc.CallOption) (SuperNode_RegisterArtowrkClient, error) {
	stream, err := c.cc.NewStream(ctx, &SuperNode_ServiceDesc.Streams[0], "/supernode.SuperNode/RegisterArtowrk", opts...)
	if err != nil {
		return nil, err
	}
	x := &superNodeRegisterArtowrkClient{stream}
	return x, nil
}

type SuperNode_RegisterArtowrkClient interface {
	Send(*RegisterArtworkRequest) error
	Recv() (*RegisterArtworkReply, error)
	grpc.ClientStream
}

type superNodeRegisterArtowrkClient struct {
	grpc.ClientStream
}

func (x *superNodeRegisterArtowrkClient) Send(m *RegisterArtworkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *superNodeRegisterArtowrkClient) Recv() (*RegisterArtworkReply, error) {
	m := new(RegisterArtworkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SuperNodeServer is the server API for SuperNode service.
// All implementations must embed UnimplementedSuperNodeServer
// for forward compatibility
type SuperNodeServer interface {
	RegisterArtowrk(SuperNode_RegisterArtowrkServer) error
	mustEmbedUnimplementedSuperNodeServer()
}

// UnimplementedSuperNodeServer must be embedded to have forward compatible implementations.
type UnimplementedSuperNodeServer struct {
}

func (UnimplementedSuperNodeServer) RegisterArtowrk(SuperNode_RegisterArtowrkServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterArtowrk not implemented")
}
func (UnimplementedSuperNodeServer) mustEmbedUnimplementedSuperNodeServer() {}

// UnsafeSuperNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperNodeServer will
// result in compilation errors.
type UnsafeSuperNodeServer interface {
	mustEmbedUnimplementedSuperNodeServer()
}

func RegisterSuperNodeServer(s grpc.ServiceRegistrar, srv SuperNodeServer) {
	s.RegisterService(&SuperNode_ServiceDesc, srv)
}

func _SuperNode_RegisterArtowrk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuperNodeServer).RegisterArtowrk(&superNodeRegisterArtowrkServer{stream})
}

type SuperNode_RegisterArtowrkServer interface {
	Send(*RegisterArtworkReply) error
	Recv() (*RegisterArtworkRequest, error)
	grpc.ServerStream
}

type superNodeRegisterArtowrkServer struct {
	grpc.ServerStream
}

func (x *superNodeRegisterArtowrkServer) Send(m *RegisterArtworkReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *superNodeRegisterArtowrkServer) Recv() (*RegisterArtworkRequest, error) {
	m := new(RegisterArtworkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SuperNode_ServiceDesc is the grpc.ServiceDesc for SuperNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.SuperNode",
	HandlerType: (*SuperNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterArtowrk",
			Handler:       _SuperNode_RegisterArtowrk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "supernode/supernode.proto",
}
